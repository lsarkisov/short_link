package com.lv.shortlink.controller;

import com.lv.shortlink.message.MessageTypes;
import com.lv.shortlink.message.ShortLinkMessage;
import com.lv.shortlink.model.ShortLinkModel;
import com.lv.shortlink.service.ShortLinkService;

import java.util.Scanner;

public class ShortLinkController {
    final Scanner scanner;
    final ShortLinkModel shortLinkModel;

    public ShortLinkController() {
        this.scanner = new Scanner(System.in);
        this.shortLinkModel = new ShortLinkModel();

        System.out.println(ShortLinkMessage.show(MessageTypes.WELCOME_MESSAGE));

        while (scanner.hasNextLine()) {
            final String[] params = scanner.nextLine().split(" ");
            switch (params.length) {
                case 1:
                    getShortLink(params[0], null);
                    break;
                case 2:
                    getShortLink(params[0], params[1]);
                    break;
                default:
                    System.out.println(ShortLinkMessage.show(MessageTypes.ARGUMENTS_VALID));
            }
        }
    }

    /**
     * Generate short link with no keyword provided by user
     *
     * @param url provided by user that will be converted
     */
    public void getShortLink(String url, String keyword) {
        final String userLink = shortLinkModel.isShortLink(url);

        /**
         * if short link exists return user link
         */
        if (!userLink.isEmpty()) {
            System.out.println(userLink);

        }
        /**
         * if a user quit the program
         */
        else if (url.equals("q")) {
            System.exit(1);

        }
        /**
         * if keyword provided by user
         */
        else if (keyword != null) {
            if (validateAll(url, keyword)) {
                showShortLink(url, keyword);
            }
        }
        /**
         * if a user link doesn't exist in store provide new short link
         */
        else {
            final String kw = ShortLinkService.generateKeyword();

            if (validateIsShortLinkExists(ShortLinkService.host + kw)) {
                getShortLink(url, null);
            }

            if (validateUrl(url)) {
                showShortLink(url, kw);
            }
        }
    }

    /**
     * Show short link
     *
     * @param url string url provided by user
     * @param keyword string keyword provided by user (optional)
     */
    public void showShortLink(String url, String keyword) {
        final String shortLink = ShortLinkService.genShortLink(keyword);
        shortLinkModel.setShortLink(url, shortLink);
        System.out.println(shortLink);
    }

    /**
     * Validates user provided url if user doesn't provide keyword
     *
     * @param url provided by user
     * @return boolean
     */
    public boolean validateAll(String url) {
        return validateUrl(url);
    }

    /**
     * Validated user provided url and keyword
     *
     * @param url
     * @param keyword
     * @return boolean
     */
    public boolean validateAll(String url, String keyword) {
        return validateUrl(url)
                && validateKeyword(keyword)
                && !validateIsShortLinkExists(keyword);
    }

    /**
     * Validates user provided url
     *
     * @param url provided by user
     * @return boolean
     */
    public boolean validateUrl(String url) {
        if (!ShortLinkService.isUrlValid(url)) {
            System.out.println(ShortLinkMessage.show(MessageTypes.URL_VALID));
            return false;
        }
        return true;
    }

    /**
     * Validated the keyword that should be alphanumeric string and
     * has a length equal to 5
     *
     * @param keyword
     * @return boolean
     */
    public boolean validateKeyword(String keyword) {
        if (!ShortLinkService.isKeywordValid(keyword)) {
            System.out.println(ShortLinkMessage.show(MessageTypes.KEYWORD_VALID));
            return false;
        }
        return true;
    }

    /**
     * Checks if provided keyword exists in store
     *
     * @param keyword string provided by user on generated by default
     * @return boolean
     */
    public boolean validateIsShortLinkExists(String keyword) {
        if (shortLinkModel.isShortLinkExists(ShortLinkService.host + keyword)) {
            System.out.println(ShortLinkMessage.show(MessageTypes.SHORT_LINK_EXISTS, keyword));
            return true;
        }
        return false;
    }
}
